<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Commands" xml:space="preserve">
    <value>Game сommands:
/show-words – displays all user-entered words in the current game;
/score – displays the total game score for current players;
/total-score – displays the total score for all players.
Surrender – the end of the game with defeat.</value>
  </data>
  <data name="ComplexityMenu" xml:space="preserve">
    <value>Changing the difficulty level
1. Easy (delay between of words 60 sec)
2. Medium (delay between of words 30 sec)
3. Hard (delay between of words 10 sec)</value>
  </data>
  <data name="ComplexityStatus" xml:space="preserve">
    <value>Complexity level: </value>
  </data>
  <data name="ComplexityStatusEasy" xml:space="preserve">
    <value>Easy</value>
  </data>
  <data name="ComplexityStatusHard" xml:space="preserve">
    <value>Hard</value>
  </data>
  <data name="ComplexityStatusMedium" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="CreateGame" xml:space="preserve">
    <value>Create game...</value>
  </data>
  <data name="EndGame" xml:space="preserve">
    <value>End game...</value>
  </data>
  <data name="EnteredWords" xml:space="preserve">
    <value>Entered words:</value>
  </data>
  <data name="EnterMainWord" xml:space="preserve">
    <value>Main word: </value>
  </data>
  <data name="ErrorChoice" xml:space="preserve">
    <value>The wrong choice was made!</value>
  </data>
  <data name="GenderMenu" xml:space="preserve">
    <value>Gender of player
1. Man
2. Woman</value>
  </data>
  <data name="LanguageInfo" xml:space="preserve">
    <value>Choose your language
1. Russian
2. English
Your choice:  </value>
  </data>
  <data name="Loser" xml:space="preserve">
    <value>Loser: </value>
  </data>
  <data name="MenuInfo" xml:space="preserve">
    <value>1. New game
2. Change number of players
3. Сhange of the complexity
4. Change language
5. Exit</value>
  </data>
  <data name="Missis" xml:space="preserve">
    <value>Missis </value>
  </data>
  <data name="Mister" xml:space="preserve">
    <value>Mister </value>
  </data>
  <data name="NumberOfPlayers" xml:space="preserve">
    <value>Number of players: </value>
  </data>
  <data name="NumberOfPlayersError" xml:space="preserve">
    <value>The number of players must be greater than 2!</value>
  </data>
  <data name="NumberOfWins" xml:space="preserve">
    <value>Number of wins: </value>
  </data>
  <data name="PlayerName" xml:space="preserve">
    <value>Player name: </value>
  </data>
  <data name="PlayerNameError" xml:space="preserve">
    <value>The player name must be between 1 and 30 characters!</value>
  </data>
  <data name="PlayerNumber" xml:space="preserve">
    <value>Player number </value>
  </data>
  <data name="PointerOfChoice" xml:space="preserve">
    <value>Your choice</value>
  </data>
  <data name="Rules" xml:space="preserve">
    <value>Rules of the game: at the beginning of the game, the user enters a word with a length of 8 to 30 characters: the essence of the game is that 2 users alternately enter words consisting of the letters of the originally specified word and not shorter than two characters. The player who in turn does not enter the word within 60 seconds loses.</value>
  </data>
  <data name="StartGame" xml:space="preserve">
    <value>Beginning of game...</value>
  </data>
  <data name="StopTime" xml:space="preserve">
    <value>Time's up!</value>
  </data>
  <data name="Surrender" xml:space="preserve">
    <value>Surrender</value>
  </data>
  <data name="Time" xml:space="preserve">
    <value>Your time: </value>
  </data>
  <data name="Tittle" xml:space="preserve">
    <value>Game "Words"</value>
  </data>
  <data name="Winers" xml:space="preserve">
    <value>Winers: </value>
  </data>
  <data name="WrongCommandError" xml:space="preserve">
    <value>Error! The entered command does not exist.</value>
  </data>
  <data name="WrongComplianceError" xml:space="preserve">
    <value>Error! The word does not correspond to the main word.</value>
  </data>
  <data name="WrongLongError" xml:space="preserve">
    <value>Error! The word has wrong length.</value>
  </data>
  <data name="WrongRepetitionError" xml:space="preserve">
    <value>Error! This word has already been introduced earlier.</value>
  </data>
  <data name="WrongSymbolError" xml:space="preserve">
    <value>Error! The word has wrong symbol.</value>
  </data>
</root>